{
  "swagger": "2.0",
  "info": {
    "title": "Refsheet.net API",
    "description": "The Refsheet.net API allows another application to view and manipulate data on behalf of a user. To get started,\n[generate an API Key from your account settings](https://refsheet.net/account/settings/api).\n\n## Authentication\n\nThe API requires two values, `api_key_id` and `api_key_secret` to be sent either as query parameters or via headers.\n\n|Field|URL Param|Header|\n|---|---|---|\n|API Key ID|`api_key_id`|`X-ApiKeyId`|\n|API Key Secret|`api_key_secret`|`X-ApiKeySecret`|\n\n\n```\ncurl -H \"X-ApiKeyId: YOUR_KEY_ID\" \\\n     -H \"X-ApiKeySecret: YOUR_KEY_SECRET\" \\\n     https://refsheet.net/api/v1/users/abc123\n```\n",
    "version": "v1"
  },
  "host": "http://dev1.refsheet.net",
  "basePath": "/api/v1",
  "paths": {
    "/users/{id}": {
      "get": {
        "summary": "Retrieve User by ID",
        "tags": [
          "Users"
        ],
        "description": "Finds a user by ID. The ID supplied should be the hexadecimal user GUID, not the username. To find a user by username,\nuse `/users/lookup/{id}`\n",
        "operationId": "find",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "description": "User GUID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "user found",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "username": {
                  "type": "string"
                },
                "profile": {
                  "type": "string"
                },
                "avatar_url": {
                  "type": "string"
                },
                "profile_image_url": {
                  "type": "string"
                },
                "is_admin": {
                  "type": "boolean"
                },
                "is_patron": {
                  "type": "boolean"
                },
                "is_supporter": {
                  "type": "boolean"
                },
                "is_moderator": {
                  "type": "boolean"
                }
              },
              "required": [
                "name",
                "username",
                "avatar_url",
                "profile_image_url"
              ]
            },
            "examples": {
              "application/json": {
                "_type": "user",
                "id": "7c86cf01c8c3e659",
                "username": "user1",
                "avatar_url": "https://secure.gravatar.com/avatar/111d68d06e2d317b5a59c2c6c5bad808?default=identicon&secure=true",
                "name": "Mrs. Lauren Bins",
                "profile_image_url": "https://secure.gravatar.com/avatar/111d68d06e2d317b5a59c2c6c5bad808?default=identicon&secure=true&size=200",
                "profile": "Soluta atque ad. Adipisci occaecati non. Id quaerat laboriosam.",
                "characters_count": 0,
                "is_admin": false,
                "is_patron": false,
                "is_supporter": false,
                "is_moderator": false
              }
            }
          },
          "404": {
            "description": "user not found",
            "examples": {
              "application/json": {
                "error": "Couldn't find User"
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update your User",
        "tags": [
          "Users"
        ],
        "description": "Updates a user account. You may only update your own user account, unless the current API user has admin scope.\n\nOn successful update, this will return `HTTP 204: No Content`.\n",
        "operationId": "update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "description": "User GUID",
            "required": true
          },
          {
            "name": "user",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "user": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "username": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "profile": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "user updated"
          },
          "404": {
            "description": "user not found",
            "examples": {
              "application/json": {
                "error": "Couldn't find User"
              }
            }
          },
          "401": {
            "description": "not authorized",
            "examples": {
              "application/json": {
                "error": "not allowed to update? this User"
              }
            }
          },
          "400": {
            "description": "bad request body",
            "examples": {
              "application/json": {
                "error": "param is missing or the value is empty: user"
              }
            }
          }
        }
      }
    },
    "/users/lookup/{username}": {
      "get": {
        "summary": "Retrieve User by Username",
        "tags": [
          "Users"
        ],
        "description": "Finds a user by Username. This operation is not case sensitive. Please consider using `/users/{id}` directly if possible.\n",
        "operationId": "lookup",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "type": "string",
            "description": "Username of the user to find",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "user found",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "username": {
                  "type": "string"
                },
                "profile": {
                  "type": "string"
                },
                "avatar_url": {
                  "type": "string"
                },
                "profile_image_url": {
                  "type": "string"
                },
                "is_admin": {
                  "type": "boolean"
                },
                "is_patron": {
                  "type": "boolean"
                },
                "is_supporter": {
                  "type": "boolean"
                },
                "is_moderator": {
                  "type": "boolean"
                }
              },
              "required": [
                "name",
                "username",
                "avatar_url",
                "profile_image_url"
              ]
            },
            "examples": {
              "application/json": {
                "_type": "user",
                "id": "2da40f6c993105f3",
                "username": "user9",
                "avatar_url": "https://secure.gravatar.com/avatar/f784fdb21d26dd2c64f5135f35ec401f?default=identicon&secure=true",
                "name": "Mr. Brock Homenick",
                "profile_image_url": "https://secure.gravatar.com/avatar/f784fdb21d26dd2c64f5135f35ec401f?default=identicon&secure=true&size=200",
                "profile": "Repudiandae veritatis cupiditate. Sed omnis tenetur. Possimus omnis unde.",
                "characters_count": 0,
                "is_admin": false,
                "is_patron": false,
                "is_supporter": false,
                "is_moderator": false
              }
            }
          },
          "404": {
            "description": "user not found",
            "examples": {
              "application/json": {
                "error": "Couldn't find User"
              }
            }
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "apiKeyId": {
      "type": "apiKey",
      "name": "X-ApiKeyId",
      "in": "header"
    },
    "apiKeySecret": {
      "type": "apiKey",
      "name": "X-ApiKeySecret",
      "in": "header"
    }
  },
  "security": [
    {
      "apiKeyId": [

      ],
      "apiKeySecret": [

      ]
    }
  ],
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ]
}