# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

interface ApplicationRecord {
    created_at: Int
    deleted_at: Int
    id: ID
    updated_at: Int
}

interface Paginated {
    count: Int
    currentPage: Int
    offset: Int
    perPage: Int
    totalEntries: Int
    totalPages: Int
}

interface Policy {
    can_destroy: Boolean
    can_edit: Boolean
}

"Various data attached to a particular moderation item"
union ModerationItem = Image

"Various data attached to a particular widget"
union WidgetData = Json | RichText | Youtube

type Activity implements ApplicationRecord {
    character: Character
    character_id: ID
    comment: String
    created_at: Int
    deleted_at: Int
    id: ID!
    updated_at: Int
    user: User
    user_id: ID!
}

type ApiKey implements ApplicationRecord {
    created_at: Int
    deleted_at: Int
    id: ID
    name: String
    read_only: Boolean
    secret: String
    updated_at: Int
    user: User
}

type Artist implements ApplicationRecord {
    avatar_url: String
    commission_info: String
    commission_info_markdown: String
    commission_url: String
    created_at: Int
    deleted_at: Int
    guid: ID!
    id: ID!
    locked: Boolean
    media_count: Int
    name: String!
    profile: String
    profile_markdown: String
    slug: String!
    updated_at: Int
    user: User
    website_url: String
}

type ArtistsCollection implements Paginated {
    artists: [Artist]!
    count: Int
    currentPage: Int
    offset: Int
    perPage: Int
    totalEntries: Int
    totalPages: Int
}

type Attribute {
    id: String!
    name: String!
    value: String
}

type Character implements ApplicationRecord {
    avatar_url(style: String): String
    can_edit: Boolean
    cover_image_url(style: String): String
    created_at: Int
    custom_attributes: [Attribute]
    deleted_at: Int
    dislikes: String
    dislikes_html: String
    featured_image: Image
    hidden: Boolean
    id: ID
    images: [Image]
    likes: String
    likes_html: String
    lodestone_character: Lodestone_Character
    marketplace_listing: MarketplaceListing
    name: String!
    nsfw: Boolean
    path: String!
    pending_transfer: Transfer
    profile: String
    profile_html: String
    profile_image: Image
    profile_sections: [ProfileSection]
    shortcode: String
    slug: String!
    special_notes: String
    special_notes_html: String
    species: String
    swatches: [Swatch]
    theme: Theme
    updated_at: Int
    user: User
    username: String!
    version: Int
    versions: [Version]
}

type CharactersCollection {
    characters: [Character]!
    count: Int
    current_page: Int
    total_entries: Int
    total_pages: Int
}

type ChatCount {
    unread: Int
}

type Conversation implements ApplicationRecord {
    blocked: Boolean
    created_at: Int
    deleted_at: Int
    guid: String!
    id: ID!
    lastMessage: Message
    messages: [Message!]
    recipient: User!
    sender: User!
    unreadCount: Int
    updated_at: Int
    user: User
}

type Forum implements ApplicationRecord {
    created_at: Int
    deleted_at: Int
    description: String
    discussion_count: Int
    discussions(page: Int, query: String, sort: String, sticky: Boolean): ForumDiscussionCollection
    id: ID
    is_member: Boolean
    is_open: Boolean
    locked: Boolean
    member_count: Int
    name: String!
    no_rp: Boolean
    nsfw: Boolean
    owner: User
    prepost_message: String
    rules: String
    slug: String
    summary: String
    system_owned: Boolean
    updated_at: Int
}

type ForumDiscussion implements ApplicationRecord & Policy {
    admin_post: Boolean
    can_destroy: Boolean
    can_edit: Boolean
    character: Character
    content: String
    content_html: String
    created_at: Int
    deleted_at: Int
    forum: Forum
    id: ID
    karma_total: Int
    last_post_at: Int
    last_read_at: Int
    locked: Boolean
    moderator_post: Boolean
    posts: [ForumPost]
    preview: String
    reply_count: Int
    shortcode: String
    slug: String
    sticky: Boolean
    topic: String
    unread_posts_count: Int
    updated_at: Int
    user: User
}

type ForumDiscussionCollection implements Paginated {
    count: Int
    currentPage: Int
    discussions: [ForumDiscussion]
    offset: Int
    perPage: Int
    totalEntries: Int
    totalPages: Int
}

type ForumPost implements ApplicationRecord & Policy {
    admin_post: Boolean
    can_destroy: Boolean
    can_edit: Boolean
    character: Character
    content: String
    content_html: String
    created_at: Int
    deleted_at: Int
    discussion: ForumDiscussion
    id: ID
    is_edited: Boolean
    karma_total: Int
    moderator_post: Boolean
    parent_post: ForumPost
    updated_at: Int
    user: User
}

type ForumPostsCollection implements Paginated {
    count: Int
    currentPage: Int
    forumPosts: [ForumPost]!
    offset: Int
    perPage: Int
    totalEntries: Int
    totalPages: Int
}

type Geometry {
    height: Int!
    width: Int!
}

type Image implements ApplicationRecord {
    aspect_ratio: Float
    background_color: String
    caption: String
    caption_html: String
    character: Character
    character_id: ID
    comments: [MediaComment]
    comments_count: Int
    created_at: Int
    deleted_at: Int
    download_link: String
    favorites: [MediaFavorite]
    favorites_count: Int
    gravity: String
    hashtags: [MediaHashtag]
    height: Int
    hidden: Boolean
    id: ID
    image_processing: Boolean
    image_processing_error: String
    is_favorite: Boolean
    is_managed: Boolean
    nsfw: Boolean
    size: ImageSize
    source_url: String
    source_url_display: String
    tags: [MediaTag]
    title: String
    updated_at: Int
    url: ImageUrl
    watermark: Boolean
    width: Int
}

type ImageSize {
    large: Geometry
    large_square: Geometry
    medium: Geometry
    medium_square: Geometry
    small: Geometry
    small_square: Geometry
    thumbnail: Geometry
}

type ImageUploadToken {
    acl: String
    key: String
    policy: String
    success_action_status: String
    url: String
    x_amz_algorithm: String
    x_amz_credential: String
    x_amz_date: String
    x_amz_signature: String
}

type ImageUrl {
    large: String
    large_square: String
    medium: String
    medium_square: String
    small: String
    small_square: String
    thumbnail: String
}

type Json {
    json: String
}

type Lodestone_Character implements ApplicationRecord {
    active_class_job: Lodestone_ClassJob
    bio: String
    class_jobs: [Lodestone_ClassJob]
    created_at: Int
    deleted_at: Int
    diety: String
    gc_name: String
    gc_rank_name: String
    id: ID
    lodestone_id: String
    name: String
    nameday: String
    portrait_url: String
    race: Lodestone_Race
    remote_updated_at: Int
    server: Lodestone_Server
    title: String
    title_top: Boolean
    town: String
    tribe: String
    updated_at: Int
}

type Lodestone_ClassJob implements ApplicationRecord {
    class_abbr: String
    class_icon_url: String
    class_name: String
    created_at: Int
    deleted_at: Int
    exp_level: Int
    exp_level_max: Int
    exp_level_togo: Int
    id: ID
    job_abbr: String
    job_active: Boolean
    job_name: String
    level: Int
    lodestone_character: Lodestone_Character
    name: String
    specialized: Boolean
    updated_at: Int
}

type Lodestone_Race implements ApplicationRecord {
    created_at: Int
    deleted_at: Int
    id: ID
    lodestone_id: String
    name: String
    updated_at: Int
}

type Lodestone_Server implements ApplicationRecord {
    created_at: Int
    datacenter: String
    deleted_at: Int
    id: ID
    lodestone_id: String
    name: String
    updated_at: Int
}

type MarketplaceListing implements ApplicationRecord {
    amount_cents: Int
    amount_currency: String
    created_at: Int
    deleted_at: Int
    id: ID
    title: String
    updated_at: Int
}

type MediaComment implements ApplicationRecord {
    comment: String!
    created_at: Int
    deleted_at: Int
    id: ID
    updated_at: Int
    user: User
}

type MediaCommentCollection implements Paginated {
    comments: [MediaComment]
    count: Int
    currentPage: Int
    offset: Int
    perPage: Int
    totalEntries: Int
    totalPages: Int
}

type MediaFavorite implements ApplicationRecord {
    created_at: Int
    deleted_at: Int
    id: ID
    updated_at: Int
    user: User
}

type MediaHashtag implements ApplicationRecord {
    count: Int
    created_at: Int
    deleted_at: Int
    id: ID
    media: Image
    tag: String
    updated_at: Int
}

type MediaTag implements ApplicationRecord {
    character: Character
    created_at: Int
    deleted_at: Int
    id: ID
    media: Image
    position_x: Int
    position_y: Int
    updated_at: Int
}

type Message implements ApplicationRecord {
    conversation: Conversation
    created_at: Int
    deleted_at: Int
    guid: String!
    id: ID!
    is_self: Boolean
    message: String
    read_at: Int
    replyTo: Message
    unread: Boolean
    updated_at: Int
    user: User!
}

type Moderation implements ApplicationRecord {
    comment: String
    created_at: Int
    deleted_at: Int
    dmcaSourceUrl: String
    id: ID
    item: ModerationItem
    itemId: ID
    itemType: String
    sender: User
    status: String
    updated_at: Int
    user: User
    violationMessage: String
    violationType: String
}

type Mutation {
    addComment(comment: String!, mediaId: ID!): MediaComment
    addFavorite(mediaId: ID!): MediaFavorite
    blockUser(username: String!): User
    convertCharacter(id: ID!): Character
    createActivity(character_id: ID, comment: String): Activity
    createApiKey(name: String, read_only: Boolean): ApiKey
    createColorScheme(characterId: ID, colorData: ThemeColorDataInput, name: String): Theme
    createDiscussion(content: String!, forumId: String!, locked: Boolean, sticky: Boolean, topic: String!): ForumDiscussion
    createForum: Forum
    createLodestoneLink(characterId: ID!, lodestoneId: String!): Lodestone_Character
    createProfileSection(characterId: ID!, createAfterSectionId: ID): ProfileSection
    createProfileWidget(characterId: ID!, columnId: ID!, sectionId: ID!, type: String!): Widget
    createSession(password: String!, remember: Boolean, username: String!): Session
    deleteLodestoneLink(characterId: ID!): Lodestone_Character
    deleteMedia(mediaId: ID!): Image
    deleteProfileSection(id: ID!): ProfileSection
    deleteProfileWidget(id: ID!): Widget
    deleteUser(password: String!, username: String!): User
    destroyCharacter(confirmation: String!, id: ID!): Character
    destroyDiscussion(id: ID!): ForumDiscussion
    destroySession: Session
    editReply(content: String!, postId: ID!): ForumPost
    markAllNotificationsAsRead: NotificationCollection
    postReply(characterId: ID, content: String!, discussionId: ID!, parentPostId: ID): ForumPost
    readNotification(id: ID!): Notification
    removeComment(id: ID!, mediaId: ID!): MediaComment
    removeFavorite(mediaId: ID!): MediaFavorite
    sendKarma(discussionId: ID!, take: Boolean): ForumPost
    sendMessage(conversationId: ID, message: String!, recipientId: ID): Message
    setCharacterAvatarBlob(blob: String, id: ID!): Character
    setCharacterCoverBlob(blob: String, id: ID!): Character
    setUserAvatarBlob(blob: String, id: ID): User
    sortGalleryImage(dropBefore: Boolean, sourceImageId: ID!, targetImageId: ID!): Character
    transferCharacter(destination: String!, id: ID!): Character
    udpateColorScheme(colorData: ThemeColorDataInput, id: ID!, name: String): Theme
    unblockUser(username: String!): User
    updateCharacter(color_scheme_id: ID, hidden: Boolean, id: ID!, name: String, nsfw: Boolean, shortcode: String, slug: String, special_notes: String, species: String): Character
    updateConversation(conversation_id: ID!, read: Boolean): Conversation
    updateDiscussion(content: String, id: ID!, locked: Boolean, sticky: Boolean, topic: String): ForumDiscussion
    updateForum: Forum
    updateImage(caption: String, characterId: ID, folder: String, gravity: String, hidden: Boolean, mediaId: ID, nsfw: Boolean, source_url: String, title: String, watermark: Boolean): Image
    updateLodestoneLink(characterId: ID!): Lodestone_Character
    updateModeration(id: ID!, resolution: String!): Moderation
    updateProfileSection(id: ID!, row_order_position: String, title: String): ProfileSection
    updateProfileWidget(column: Int, data: String, id: ID!, row_order_position: String, title: String): Widget
    uploadImage(characterId: ID!, folder: String, key: String, location: String, nsfw: Boolean, title: String): Image
}

type Notification implements ApplicationRecord {
    created_at: Int
    deleted_at: Int
    href: String
    icon: String
    id: ID
    is_unread: Boolean
    link: String
    message: String
    read_at: Int
    tag: String
    title: String
    type: String
    updated_at: Int
}

type NotificationCollection implements ApplicationRecord {
    created_at: Int
    deleted_at: Int
    id: ID
    notifications: [Notification]
    unreadCount: Int
    updated_at: Int
}

type ProfileSection {
    columns: [Int]!
    id: ID!
    row_order: Int
    title: String
    widgets: [Widget]
}

type Query {
    autocompleteCharacter(slug: String, username: String): [Character]
    autocompleteHashtags(hashtag: String!): [MediaHashtag]
    autocompleteUser(username: String): [User]
    chatCounts: ChatCount
    findUser(username: String!): User
    getActivity(page: Int, since: Int, type: String): [Activity]
    getArtist(slug: String!): Artist
    getArtists(page: Int, perPage: Int): ArtistsCollection
    getCharacter(id: ID!, shortcode: Boolean): Character
    getCharacterByUrl(slug: String!, username: String!): Character
    getCharacters(ascending: Boolean, ids: [ID], order: String, page: Int, query: String, with_deleted: Boolean): [Character]
    getComments(mediaId: ID!, page: Int, perPage: Int, since: Int): MediaCommentCollection
    getConversation(conversationId: ID!): Conversation
    getConversations: [Conversation]
    getDiscussion(forumId: String!, id: String!): ForumDiscussion
    getForum(slug: String!): Forum
    getForumPosts(discussionId: ID, page: Int, perPage: Int, userId: ID): ForumPostsCollection
    getForums: [Forum]
    getImageUploadToken(characterId: ID!): ImageUploadToken
    getMedia(mediaId: ID!): Image
    getMessages(conversationId: ID!): [Message]
    getNextModeration: Moderation
    getNotifications(page: Int): NotificationCollection
    getSession: Session
    getUser(id: ID, username: String): User
    getUsers(ascending: Boolean, ids: [ID], order: String, page: Int, perPage: Int, query: String, with_deleted: Boolean): UsersCollection
    getVersion: RefsheetMeta
    searchForCharacter(page: Int, query: String!): CharactersCollection
}

type RefsheetMeta {
    version: String
}

type RichText {
    content: String
    content_html: String
}

type Session {
    currentUser: User
    locale: String
    nsfwOk: Boolean
    sessionId: String
    timeZone: String
}

type Subscription {
    "Character information has changed"
    characterChanged(id: String!): Character!
    "Conversation counts changed"
    chatCountsChanged: ChatCount
    "Conversation changed somehow"
    convChanged(convId: ID!): Conversation!
    "Image processing complete"
    imageProcessingComplete(imageId: ID!): Image
    "New comment on media"
    newComment(mediaId: ID!): MediaComment!
    "Conversation changed somehow"
    newConversation: Conversation!
    "New favorite on media"
    newFavorite(mediaId: ID!): MediaFavorite!
    "New message published"
    newMessage(conversationId: ID!): Message!
    "New notifications go here"
    newNotification: Notification!
}

type Swatch implements ApplicationRecord {
    color: String
    created_at: Int
    deleted_at: Int
    id: ID
    name: String
    notes: String
    updated_at: Int
}

type Theme implements ApplicationRecord {
    colors: ThemeColorData
    created_at: Int
    deleted_at: Int
    id: ID
    name: String
    updated_at: Int
}

type ThemeColorData {
    accent1: String
    accent2: String
    background: String
    cardBackground: String
    imageBackground: String
    primary: String
    text: String
    textLight: String
    textMedium: String
}

type Transfer implements ApplicationRecord {
    created_at: Int
    deleted_at: Int
    id: ID!
    updated_at: Int
}

type User implements ApplicationRecord {
    apiKeys: [ApiKey]
    avatar_url(style: String): String
    blocks: Boolean
    characters: [Character]
    characters_count: String
    created_at: Int
    deleted_at: Int
    email: String
    email_confirmed_at: Int
    id: ID
    is_admin: Boolean
    is_blocked: Boolean
    is_followed: Boolean
    is_managed: Boolean
    is_moderator: Boolean
    is_patron: Boolean
    is_supporter: Boolean
    link: String
    name: String
    profile: String
    profile_html: String
    profile_image_url: String
    support_pledge_amount: Int
    unconfirmed_email: String
    updated_at: Int
    username: String
}

type UsersCollection implements Paginated {
    count: Int
    currentPage: Int
    offset: Int
    perPage: Int
    totalEntries: Int
    totalPages: Int
    users: [User]!
}

type Version implements ApplicationRecord {
    created_at: Int
    deleted_at: Int
    event: String!
    id: ID
    index: Int
    item_id: Int!
    item_type: String!
    object: String
    object_changes: String
    updated_at: Int
    was_me: Boolean
    whodunnit: User
}

type Widget {
    column: Int!
    data: WidgetData
    id: ID!
    row_order: Int
    title: String
    widget_type: String!
}

type Youtube {
    url: String
}

input ThemeColorDataInput {
    accent1: String
    accent2: String
    background: String
    cardBackground: String
    imageBackground: String
    primary: String
    text: String
    textLight: String
    textMedium: String
}
