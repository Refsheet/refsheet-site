var CACHE_VERSION = 'v1';
var CACHE_NAME = CACHE_VERSION + ':sw-cache-';

function onInstall(event) {
  console.log('[Serviceworker]', "Installing!", event);
  event.waitUntil(
    caches.open(CACHE_NAME).then(function prefill(cache) {
      return cache.addAll([

        // make sure serviceworker.js is not required by application.js
        // if you want to reference application.js from here
        '<%= asset_path "application.js" %>',

        '<%= asset_path "application.css" %>',

        '/offline.html',

      ]);
    })
  );
}

function onActivate(event) {
  console.log('[Serviceworker]', "Activating!", event);
  event.waitUntil(
    caches.keys().then(function(cacheNames) {
      return Promise.all(
        cacheNames.filter(function(cacheName) {
          // Return true if you want to remove this cache,
          // but remember that caches are shared across
          // the whole origin
          return cacheName.indexOf(CACHE_VERSION) !== 0;
        }).map(function(cacheName) {
          return caches.delete(cacheName);
        })
      );
    })
  );
}

// Borrowed from https://github.com/TalAter/UpUp
function onFetch(event) {
  event.respondWith(
    // try to return untouched request from network first
    fetch(event.request).catch(function() {
      // if it fails, try to return request from the cache
      return caches.match(event.request).then(function(response) {
        if (response) {
          return response;
        }
        // if not found in cache, return default offline content for navigate requests
        if (event.request.mode === 'navigate' ||
          (event.request.method === 'GET' && event.request.headers.get('accept').includes('text/html'))) {
          console.log('[Serviceworker]', "Fetching offline content", event);
          return caches.match('/offline.html');
        }
      })
    })
  );
}

function onPush(event) {
    var data = (event.data && event.data.json()) || {}
    var title = data.title || 'Notification from Refsheet.net';

    var args = {
        body: data.body,
        icon: 'https://assets.refsheet.net/assets/logos/RefsheetLogo_64.png',
        tag: data.tag || 'refsheet-notification',
        vibrate: [ 100, 100, 300, 100, 100],
        actions: data.actions || [],
        data: { href: data.href }
    }

    console.log('[WebPush]', 'Got Event:', event.data);

    var notification = self.registration.showNotification(title, args);

    event.waitUntil(
        notification
    );
}

function onClick(event) {
    console.log('On notification click: ', event.notification.data);
    event.notification.close();

    var href;

    if(!event.notification.data && !event.notification.data.href) {
        return;
    } else {
        href = event.notification.data.href
    }

    // This looks to see if the current is already open and
    // focuses if it is
    event.waitUntil(clients.matchAll({
        type: "window"
    }).then(function(clientList) {
        for (var i = 0; i < clientList.length; i++) {
            var client = clientList[i];

            if (client.url == href && 'focus' in client)
                return client.focus();
        }
        if (clients.openWindow)
            return clients.openWindow(href);
    }));
}

self.addEventListener('install', onInstall);
self.addEventListener('activate', onActivate);
self.addEventListener('fetch', onFetch);
self.addEventListener('push', onPush);

self.addEventListener('notificationclick', onClick);
