#!/usr/bin/env ruby

require 'tty-prompt'

DEFAULT_CLUSTER="refsheet-prod"

def select(list, msg = "Choose one:")
  prompt = TTY::Prompt.new
  prompt.select(msg) do |menu|
    list.each do |item|
      menu.choice name: "#{item}", value: item
    end
  end
end

def get_nodes
    pools=`gcloud container node-pools list --cluster "#{DEFAULT_CLUSTER}"`
    #` | grep -vP '^NAME' | cut -d' ' -f1 | tr '\n' '\t'`
    puts pools.inspect
    exit 0
    pool = select pools
    `kubectl get nodes -l cloud.google.com/gke-nodepool=#{pool} -o=name`
end

def do_ssh(command, search = nil)
  print "Loading...\r"

	pod_lists=`kubectl get pods --field-selector=status.phase=Running -o=jsonpath="{range .items[*]}{\\"\\n\\"}{.metadata.name}{\\"\\t\\"}{range .spec.containers[*]}{.name}{\\"\\t\\"}{end}{end}`.split(/\n/)
	pods = pod_lists.collect { |l| l.split(/\s+/)[0] }.reject(&:nil?).sort

  pod = nil
  container = nil

  if search
    pod_lists.reject { |l| l == ""}.each do |line|
      mpod, *containers = line.split(/\s+/)
      if containers.include? search
        pod = mpod
        container = search
      end
    end
  end

  print "          \r"
	pod ||= select pods, "Select a Pod:"

  containers = pod_lists.grep(/^#{pod}/).first.split("\t")
  containers.shift

  if !container && containers.length > 1
    puts
    container = select containers, "Select a running container:"
  end

  puts "Connecting to #{container} on #{pod}"
  system("kubectl exec \"#{pod}\" -it -c \"#{container}\" -- #{command}")
end

def do_console(search = nil)
  do_ssh "bundle exec rails c", search
end

def do_bash(search = nil)
  do_ssh "bash", search
end

def do_migrations(search = nil)
  do_ssh "bundle exec rails db:migrate", search
end

def do_logs(search = nil)
  puts "Select a pod:"
  printf "Loading...\r"

  pods=`kubectl get pods -o=jsonpath='{.items[*].metadata.name}' | sort`.split(/\n/)
  pod = select pods
  puts
  puts `kubectl logs "$pod" | less`
end

def do_cordon_all
    puts "Fetching node pools..."
    get_nodes.split('\t').each do |node|
        puts `kubectl cordon "#{node}"`
    end
end

def do_drain_all
    puts "Fetching node pools..."
    get_nodes.split('\t').each do |node|
        puts `kubectl drain --force --ignore-daemonsets --delete-local-data --grace-period=10 "#{node}"`
    end
end

case ARGV[0]
when "list-pods"
  print "Fetching data...\r"
		  puts `kubectl get pods --no-headers=true`.split("\n").grep(/Running/)
	when "ssh"
		  do_bash(ARGV[1])
	when "console"
	   do_console(ARGV[1])
	when "logs"
      do_logs(ARGV[1])
	when "cordon-all"
	    do_cordon_all
  when "drain-all"
      do_drain_all
when "migrate"
      do_migrations(ARGV[1])
  when "apply"
      puts `bin/rb rake kube:update_config`
	else
	    puts "Usage:"
	    puts "  gke list-pods|ssh|logs|migrate|cordon-all|drain-all|apply"
end
